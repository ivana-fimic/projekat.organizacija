/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.ac.bg.fon.ai.projekat.organizacija.form.zadatak;

import rs.ac.bg.fon.ai.projekat.organizacija.controller.KlijentController;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.Clan;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.StatistikaZadatka;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.Tim;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.Zadatak;
import rs.ac.bg.fon.ai.projekat.organizacija.models.ModelStatistikaZadataka;
import rs.ac.bg.fon.ai.projekat.organizacija.pomocne.FazaZadatka;
import rs.ac.bg.fon.ai.projekat.organizacija.pomocne.Moodovi;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;





/**
 *
 * @author Ivana
 */
public class DetaljiZadatka extends javax.swing.JDialog {

    /**
     * Creates new form DetaljiZadatka
     */
    Zadatak izabraniZadatak;
    Moodovi moodTabele;
    JComboBox<FazaZadatka> cmbFaza;
    JComboBox<Clan> cmbClanovi;
    private PretraziZadatak roditelj1;
    private DetaljiZadatka roditelj2;
    Tim izabraniTim;
    public JTable getTblStatistike() {
        return tblStatistike;
    }

    public void setTblStatistike(JTable tblStatistike) {
        this.tblStatistike = tblStatistike;
    }

    public JComboBox<Tim> getCmbTim() {
        return cmbTim;
    }

    public void setCmbTim(JComboBox<Tim> cmbTim) {
        this.cmbTim = cmbTim;
    }

    public JTextField getTxtNazivZadatka() {
        return txtNazivZadatka;
    }

    public void setTxtNazivZadatka(JTextField txtNazivZadatka) {
        this.txtNazivZadatka = txtNazivZadatka;
    }

    public DetaljiZadatka(javax.swing.JDialog parent, javax.swing.JDialog grandparent, boolean modal, Zadatak z, Moodovi mood) throws Exception {
        super(parent, modal);
        initComponents();
        setTitle("Detalji zadatka");
        setLocationRelativeTo(null);
        izabraniZadatak = z;
        tblStatistike.setModel(new ModelStatistikaZadataka(z.getStatistika()));

         ModelStatistikaZadataka mt = (ModelStatistikaZadataka) tblStatistike.getModel();
        cmbFaza = new JComboBox<>(FazaZadatka.values());
        tblStatistike.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(cmbFaza));
        //z.setStatistika(mt.getStatistike());
        moodTabele = Moodovi.NEIZMENJENO;
        popuniComboe();
     
        if (parent instanceof PretraziZadatak) {
            roditelj1 = (PretraziZadatak) parent;
        } else {
            roditelj2 = (DetaljiZadatka) parent;
            roditelj1 = (PretraziZadatak) grandparent;
        }
        if (mood == Moodovi.PRIKAZ) {
            txtNazivZadatka.setEditable(false);
            cmbTim.setEnabled(false);
            txtDatumDodele.setEditable(false);
            txtKranjiRok.setEditable(false);
            cmbClan.setEnabled(false);
            cmbFazaZadatka.setEnabled(false);
            btnDodaj.setEnabled(false);
            btnObrisi.setEnabled(false);
            btnSacuvajIzmene.setEnabled(false);
            mt.setEditable(false);
        }
        cmbTim.setEnabled(false);
        setLocationRelativeTo(null);
        setTitle("Detalji zadatka");

        txtNazivZadatka.setText(z.getNazivZadatka());
        cmbTim.setSelectedItem(z.getTim());
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbTim = new javax.swing.JComboBox<>();
        txtNazivZadatka = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btnSacuvajIzmene = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStatistike = new javax.swing.JTable();
        btnObrisi = new javax.swing.JButton();
        btnDodaj = new javax.swing.JButton();
        cmbClan = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cmbFazaZadatka = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDatumDodele = new javax.swing.JTextField();
        txtKranjiRok = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Unos zadatka"));

        jLabel1.setText("Naziv zadatka:");

        jLabel2.setText("Tim:");

        cmbTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbTim, 0, 372, Short.MAX_VALUE)
                    .addComponent(txtNazivZadatka))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNazivZadatka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cmbTim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jButton1.setText("IZMENI");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnSacuvajIzmene.setText("SACUVAJ IZMENE");
        btnSacuvajIzmene.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajIzmeneActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Unos statistike zadatka"));

        tblStatistike.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStatistike);

        btnObrisi.setText("OBRISI");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        btnDodaj.setText("DODAJ");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });

        cmbClan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbClanActionPerformed(evt);
            }
        });

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Clan:");

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Faza zadatka:");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Datum dodele:");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Krajnji rok:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnObrisi)
                .addGap(410, 410, 410)
                .addComponent(btnDodaj)
                .addGap(40, 40, 40))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbClan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbFazaZadatka, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDatumDodele)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(15, 15, 15)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtKranjiRok)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(3, 3, 3)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbClan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbFazaZadatka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDatumDodele, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKranjiRok, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDodaj)
                    .addComponent(btnObrisi, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(136, 136, 136)
                                .addComponent(btnSacuvajIzmene)
                                .addGap(31, 31, 31))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSacuvajIzmene)
                    .addComponent(jButton1))
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTimActionPerformed

    }//GEN-LAST:event_cmbTimActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
             Zadatak ucitaniIzBaze=KlijentController.getInstance().ucitajZadatak(izabraniZadatak);
               JOptionPane.showMessageDialog(this, "Sistem je ucitao zadatak", "POTVRDA", JOptionPane.INFORMATION_MESSAGE);
            new DetaljiZadatka(this, roditelj1, true, ucitaniIzBaze, Moodovi.IZMENA).setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(DetaljiZadatka.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnSacuvajIzmeneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajIzmeneActionPerformed
        try {

            String nazivZadatka = txtNazivZadatka.getText();
            Tim t = (Tim) cmbTim.getSelectedItem();
            String praznaPolja = DaliSuPoljaPraznaZadatak(nazivZadatka, t);
            if (!praznaPolja.equals("")) {
                JOptionPane.showMessageDialog(this, "Sistem ne moze da zapamti zadatak!", "Informacija", JOptionPane.ERROR_MESSAGE);
                JOptionPane.showMessageDialog(this, "Polja su prazna: " + praznaPolja, "GRESKA", JOptionPane.ERROR_MESSAGE);
                return;
            }
            ModelStatistikaZadataka mp = (ModelStatistikaZadataka) tblStatistike.getModel();

            Zadatak z2 = new Zadatak();
            z2.setNazivZadatka(nazivZadatka);
            z2.setTim(t);
            z2.setIDZadatka(izabraniZadatak.getIDZadatka());
            for (StatistikaZadatka sz : mp.getStatistike()) {
                sz.setZaClana("da");
            }
            List<StatistikaZadatka> statistike = new ArrayList<>();
            
            for (StatistikaZadatka stat : mp.getStatistike()) {
           /*     String formatDatuma = DaLiSuDatumiIspravni(stat.getDatumDodele(), stat.getKrajnjiRok());
            if (!formatDatuma.equals("")) {
                JOptionPane.showMessageDialog(this, formatDatuma, "GRESKA", JOptionPane.ERROR_MESSAGE);
                return;
            } */
            statistike.add(stat);
            }
            
  
            if (statistike.size() == 0) {
                JOptionPane.showMessageDialog(this, "Moras uneti statistiku za ovaj zadatak", "GRESKA", JOptionPane.ERROR_MESSAGE);
                return;
            }
            z2.setStatistika(mp.getStatistike());

            z2.setMoodTabele(moodTabele);
            KlijentController.getInstance().izmeniZadatak(z2);

            if (roditelj1 instanceof PretraziZadatak && roditelj1 != null) {
                roditelj1.refreshTable();
                System.out.println("If za Pretragu");
            }
            if (roditelj2 instanceof DetaljiZadatka && roditelj2 != null) {
                roditelj2.getTxtNazivZadatka().setText(z2.getNazivZadatka());
                roditelj2.getCmbTim().setSelectedItem(z2.getTim());
                ModelStatistikaZadataka mt = (ModelStatistikaZadataka) roditelj2.getTblStatistike().getModel();
                mt.setStatistike(z2.getStatistika());

                mt.refreshTable();

            }
            JOptionPane.showMessageDialog(this, "Sistem je zapamtio zadatak.");

        } catch (Exception ex) {
            Logger.getLogger(DetaljiZadatka.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnSacuvajIzmeneActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        Clan clan = (Clan) cmbClan.getSelectedItem();
        FazaZadatka faza = (FazaZadatka) cmbFazaZadatka.getSelectedItem();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String dateString1 = txtDatumDodele.getText();
        String dateString2 = txtKranjiRok.getText();
        String praznaPolja = DaliSuPoljaPraznaStatistika(clan, faza, dateString1, dateString2);
        if (!praznaPolja.equals("")) {
            JOptionPane.showMessageDialog(this, "Polja su prazna: " + praznaPolja, "GRESKA", JOptionPane.ERROR_MESSAGE);
            return;
        }

        LocalDate datumDodele;
        LocalDate krajnjiRok;

        try {
            datumDodele = LocalDate.parse(dateString1, formatter);
            krajnjiRok = LocalDate.parse(dateString2, formatter);
            String formatDatuma = DaLiSuDatumiIspravni(datumDodele, krajnjiRok);
            if (!formatDatuma.equals("")) {
                JOptionPane.showMessageDialog(this, formatDatuma, "GRESKA", JOptionPane.ERROR_MESSAGE);
                return;
            }

            StatistikaZadatka statistika = new StatistikaZadatka(clan, izabraniZadatak, faza, datumDodele, krajnjiRok);
            statistika.setZaClana("da");
            ModelStatistikaZadataka tm = (ModelStatistikaZadataka) tblStatistike.getModel();

            if (tm.postojiClan(statistika)) {
                JOptionPane.showMessageDialog(this, "Vec ste uneli clana za ovaj zadatak!");
                return;
            }
            tm.dodajClana(statistika);
            moodTabele = Moodovi.DODATO;
            izabraniZadatak.setStatistika(tm.getStatistike());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Niste uneli datum u ispravnom formatu! Ispravan format:yyyy-MM-dd");
        }
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int row = tblStatistike.getSelectedRow();

        if (row >= 0) {
            ModelStatistikaZadataka tm = (ModelStatistikaZadataka) tblStatistike.getModel();
            tm.obrisiClana(row);

            moodTabele = Moodovi.OBRISANO;
            izabraniZadatak.setStatistika(tm.getStatistike());
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void cmbClanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbClanActionPerformed
       
    }//GEN-LAST:event_cmbClanActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnSacuvajIzmene;
    private javax.swing.JComboBox<Clan> cmbClan;
    private javax.swing.JComboBox<FazaZadatka> cmbFazaZadatka;
    private javax.swing.JComboBox<Tim> cmbTim;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStatistike;
    private javax.swing.JTextField txtDatumDodele;
    private javax.swing.JTextField txtKranjiRok;
    private javax.swing.JTextField txtNazivZadatka;
    // End of variables declaration//GEN-END:variables

    private void popuniComboe() throws Exception {
        Tim tim = new Tim();
        tim.setParametarZaPretragu("");
        List<Tim> timovi = KlijentController.getInstance().vratiTimove(tim);
        for (Tim t : timovi) {
            cmbTim.addItem(t);

        }
        
        cmbClan.removeAllItems();
        izabraniTim = (Tim) cmbTim.getSelectedItem();
        Clan c = new Clan();
        c.setParametarZaPretragu("");
        c.setTim(izabraniZadatak.getTim());
        try {
            List<Clan> clanovi = KlijentController.getInstance().vratiClanove(c);
            for (Clan cl : clanovi) {

                cmbClan.addItem(cl);

            }
        } catch (Exception ex) {
            System.out.println("GRESKA");
        }

       
        for (FazaZadatka faza : FazaZadatka.values()) {
            cmbFazaZadatka.addItem(faza);
        }

    }

    private String DaliSuPoljaPraznaZadatak(String nazivZadatka, Tim t) {
        String poruka = "";
        if (nazivZadatka.equals("")) {
            poruka += "Naziv zadatka, ";
        }

        if (t == null) {
            poruka += "Tim, ";
        }

        return poruka;
    }

    private String DaliSuPoljaPraznaStatistika(Clan clan, FazaZadatka faza, String dateString1, String dateString2) {
        String poruka = "";
        if (dateString1.equals("")) {
            poruka += "Datum dodele, ";
        }
        if (dateString2.equals("")) {
            poruka += "Krajnji rok, ";
        }
        if (clan == null) {
            poruka += "Clan, ";
        }

        if (faza == null) {
            poruka += "Faza, ";
        }

        return poruka;
    }

    private String DaLiSuDatumiIspravni(LocalDate datumDodele, LocalDate krajnjiRok) {
        String poruka = "";
        if (datumDodele.isAfter(krajnjiRok)) {
            poruka += "Datum dodele mora biti pre datuma krajnjeg roka \n";

        }
        if (krajnjiRok.isBefore(LocalDate.now())) {
            poruka += "Krajnji rok ne moze biti u proslosti \n";
        }
        return poruka;
    }
}
