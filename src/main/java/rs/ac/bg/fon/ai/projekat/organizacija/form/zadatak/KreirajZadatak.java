/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package rs.ac.bg.fon.ai.projekat.organizacija.form.zadatak;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializer;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileWriter;
import java.io.IOException;
import rs.ac.bg.fon.ai.projekat.organizacija.controller.KlijentController;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.Clan;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.StatistikaZadatka;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.Tim;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.Zadatak;
import rs.ac.bg.fon.ai.projekat.organizacija.models.ModelStatistikaZadataka;
import rs.ac.bg.fon.ai.projekat.organizacija.pomocne.FazaZadatka;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import rs.ac.bg.fon.ai.projekat.organizacija.domain.Resurs;



/**
 *
 * @author Ivana
 */
public class KreirajZadatak extends javax.swing.JDialog {

    /**
     * Creates new form KreirajZadatak
     */
    Tim izabraniTim;
    ModelStatistikaZadataka model;
    Zadatak z;

    public KreirajZadatak(java.awt.Frame parent, boolean modal) throws Exception {
        super(parent, modal);
        initComponents();
        setTitle("Kreiranje zadatka");
        setLocationRelativeTo(null);
        jPanel2.setMaximumSize(new Dimension(600, 200));
        setSize(800, 600);
        popuniComboe();
        cmbClan.setSelectedIndex(-1);
        izabraniTim = (Tim) cmbTim.getSelectedItem();
        model = new ModelStatistikaZadataka();
        tblStatistike.setModel(model);
        cmbTim.setSelectedIndex(-1);
        Timer timer = new Timer(5000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (cmbTim.getSelectedIndex() != -1) {
                    cmbTimActionPerformed(e);
                }
            }
        });

        timer.start(); // 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbTim = new javax.swing.JComboBox<>();
        txtNazivZadatka = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbClan = new javax.swing.JComboBox<>();
        cmbFazaZadatka = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtDatumDodele = new javax.swing.JTextField();
        txtKranjiRok = new javax.swing.JTextField();
        btnDodaj = new javax.swing.JButton();
        btnObrisi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStatistike = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Unos zadatka"));

        jLabel1.setText("Naziv zadatka:");

        jLabel2.setText("Tim:");

        cmbTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTimActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbTim, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtNazivZadatka))
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtNazivZadatka, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(cmbTim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Unos statistike zadatka"));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Clan:");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 18, 136, -1));

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Faza zadatka:");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 18, 136, -1));

        jPanel2.add(cmbClan, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 37, 136, -1));

        jPanel2.add(cmbFazaZadatka, new org.netbeans.lib.awtextra.AbsoluteConstraints(168, 37, 136, -1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Datum dodele:");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 18, 136, -1));

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Krajnji rok:");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(477, 18, 136, -1));
        jPanel2.add(txtDatumDodele, new org.netbeans.lib.awtextra.AbsoluteConstraints(326, 37, 136, -1));
        jPanel2.add(txtKranjiRok, new org.netbeans.lib.awtextra.AbsoluteConstraints(468, 37, 134, -1));

        btnDodaj.setText("DODAJ");
        btnDodaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDodajActionPerformed(evt);
            }
        });
        jPanel2.add(btnDodaj, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 65, -1, -1));

        btnObrisi.setText("OBRIÅ I");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });
        jPanel2.add(btnObrisi, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 65, -1, -1));

        tblStatistike.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblStatistike);

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 106, 602, 187));

        jButton1.setText("SACUVAJ ZADATAK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 299, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
         
        String naziv = txtNazivZadatka.getText();
        String praznaPolja=DaliSuPoljaPraznaZadatak(naziv,izabraniTim);
           if (!praznaPolja.equals("")) {
            JOptionPane.showMessageDialog(this, "Sistem ne moze da kreira zadatak!", "GRESKA", JOptionPane.ERROR_MESSAGE);
            JOptionPane.showMessageDialog(this, "Polja su prazna: " + praznaPolja, "GRESKA", JOptionPane.ERROR_MESSAGE);
            return;
        }
            z = new Zadatak(0, naziv, izabraniTim);
            List<StatistikaZadatka> statistike = new ArrayList<>();
            for (StatistikaZadatka stat : model.getStatistike()) {
                statistike.add(stat);
            }
            if(statistike.size()==0){
                JOptionPane.showMessageDialog(this, "Moras uneti statistiku za ovaj zadatak", "GRESKA", JOptionPane.ERROR_MESSAGE);
            return;
            }
            z.setStatistika(statistike);

            // StatistikaZadatka statistika = new StatistikaZadatka(clan, zadatak, faza, datumDodele, krajnjiRok);
            
            z = KlijentController.getInstance().dodajZadatak(z);
            upisiUJSON(z);
            if (z != null) {
                JOptionPane.showMessageDialog(this, "Sistem je kreirao zadatak");
                osveziFormu();
            }
        } catch (Exception ex) {
            java.util.logging.Logger.getLogger(KreirajZadatak.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed


    private void cmbTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTimActionPerformed
        cmbClan.removeAllItems();
        izabraniTim = (Tim) cmbTim.getSelectedItem();
        Clan c = new Clan();
        c.setParametarZaPretragu("");
        c.setTim(izabraniTim);
        try {
            List<Clan> clanovi = KlijentController.getInstance().vratiClanove(c);
            for (Clan cl : clanovi) {

                cmbClan.addItem(cl);

            }
        } catch (Exception ex) {
            System.out.println(ex);
        }
    }//GEN-LAST:event_cmbTimActionPerformed

    private void btnDodajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDodajActionPerformed
        Clan clan = (Clan) cmbClan.getSelectedItem();
        FazaZadatka faza = (FazaZadatka) cmbFazaZadatka.getSelectedItem();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
        String dateString1 = txtDatumDodele.getText();
        String dateString2 = txtKranjiRok.getText();
        
        String praznaPolja=DaliSuPoljaPraznaStatistika(clan,faza,dateString1,dateString2);
        if (!praznaPolja.equals("")) {
            JOptionPane.showMessageDialog(this, "Polja su prazna: " + praznaPolja, "GRESKA", JOptionPane.ERROR_MESSAGE);
            return;
        }
       
        LocalDate datumDodele;
        LocalDate krajnjiRok;

        try {
            datumDodele = LocalDate.parse(dateString1, formatter);
            krajnjiRok = LocalDate.parse(dateString2, formatter);
             String formatDatuma=DaLiSuDatumiIspravni(datumDodele,krajnjiRok);
             if (!formatDatuma.equals("")) {
            JOptionPane.showMessageDialog(this,formatDatuma, "GRESKA", JOptionPane.ERROR_MESSAGE);
            return;
        }
            StatistikaZadatka statistika = new StatistikaZadatka(clan, z, faza, datumDodele, krajnjiRok);
            ModelStatistikaZadataka tm = (ModelStatistikaZadataka) tblStatistike.getModel();

            if (tm.postojiClan(statistika)) {
                JOptionPane.showMessageDialog(this, "Vec ste uneli clana za ovaj zadatak");
                return;
            }
            tm.dodajClana(statistika);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Niste uneli datum u ispravnom formatu! Ispravan format:yyyy-MM-dd");
         
        }
    }//GEN-LAST:event_btnDodajActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        int row = tblStatistike.getSelectedRow();

        if (row >= 0) {
            ModelStatistikaZadataka tm = (ModelStatistikaZadataka) tblStatistike.getModel();
            tm.obrisiClana(row);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDodaj;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JComboBox<Clan> cmbClan;
    private javax.swing.JComboBox<FazaZadatka> cmbFazaZadatka;
    private javax.swing.JComboBox<Tim> cmbTim;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblStatistike;
    private javax.swing.JTextField txtDatumDodele;
    private javax.swing.JTextField txtKranjiRok;
    private javax.swing.JTextField txtNazivZadatka;
    // End of variables declaration//GEN-END:variables

    private void popuniComboe() throws Exception {
        
        List<Tim> timovi = KlijentController.getInstance().vratiTimove();
        
        for (Tim t : timovi) {
            cmbTim.addItem(t);

        }
        cmbTim.setSelectedIndex(-1);

        for (FazaZadatka faza : FazaZadatka.values()) {
            cmbFazaZadatka.addItem(faza);
        }
        cmbFazaZadatka.setSelectedIndex(-1);
    }

    private void osveziFormu() {
        txtNazivZadatka.setText("");
        cmbTim.setSelectedIndex(-1);
        cmbClan.setSelectedIndex(-1);
        cmbFazaZadatka.setSelectedIndex(-1);
        txtDatumDodele.setText("");
        txtKranjiRok.setText("");
        ModelStatistikaZadataka tm = (ModelStatistikaZadataka) tblStatistike.getModel();
        int rowCount = tm.getRowCount();
        if (rowCount > 0) {
            for (int i = rowCount - 1; i >= 0; i--) {
                tm.obrisiClana(i);
            }
        }
    }

    private String DaliSuPoljaPraznaZadatak(String naziv, Tim izabraniTim) {
     String poruka = "";
        if (naziv.equals("")) {
            poruka += "Naziv zadatka, ";
        }
        
        if(izabraniTim==null){
            poruka += "Tim, ";
        }
        
        return poruka;
    }

    private String DaliSuPoljaPraznaStatistika(Clan clan, FazaZadatka faza, String dateString1, String dateString2) {
       String poruka = "";
        if (dateString1.equals("")) {
            poruka += "Datum dodele, ";
        }
         if (dateString2.equals("")) {
            poruka += "Krajnji rok, ";
        }
        if(clan==null){
            poruka += "Clan, ";
        }
        
         if(faza==null){
            poruka += "Faza, ";
        }
         
         
         
        return poruka;
        
    }

    private String DaLiSuDatumiIspravni(LocalDate datumDodele, LocalDate krajnjiRok) {
       String poruka="";
        if(datumDodele.isAfter(krajnjiRok)){
           poruka+="Datum dodele mora biti pre datuma krajnjeg roka \n";
           
       }
        if(krajnjiRok.isBefore(LocalDate.now())){
            poruka+="Krajnji rok ne moze biti u proslosti \n";
        }
        return poruka;
    }
    
    private void upisiUJSON(Zadatak z) {
        String filePath = "src/main/resources/zadatak.json";

        GsonBuilder gsonBuilder = new GsonBuilder();
        gsonBuilder.excludeFieldsWithoutExposeAnnotation();

        gsonBuilder.setPrettyPrinting();

        gsonBuilder.registerTypeAdapter(LocalDate.class, (JsonSerializer<LocalDate>) (src, typeOfSrc, context)
                -> new com.google.gson.JsonPrimitive(src.toString())
        );
        

        Gson gson = gsonBuilder.create();

        try (FileWriter out = new FileWriter(filePath)) {
            String jsonString = gson.toJson(z);
            System.out.println("JSON string: " + jsonString);
            out.write(jsonString);
            System.out.println("UspeÅ¡no upisano u fajl: " + filePath);
        } catch (IOException e) {
            e.printStackTrace();
            System.err.println("GreÅ¡ka pri pisanju u fajl: " + filePath);
        }
    }
}
